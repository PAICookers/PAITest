from typing import Tuple, Union, Optional, overload

class Coord:
    x: int = ...
    y: int = ...
    def __init__(self, _x: Union[Tuple[int, int], int], _y: Optional[int] = None) -> None: ...
    @classmethod
    def from_tuple(cls, pos) -> Coord: ...
    @classmethod
    def default(cls) -> Coord: ...
    def __add__(self, __other: CoordOffset) -> Coord: ...
    @overload
    def __sub__(self, __other: Coord) -> CoordOffset: ...
    @overload
    def __sub__(self, __other: CoordOffset) -> Coord: ...
    def __eq__(self, __other: Coord) -> bool: ...
    def __ne__(self, __other: Coord) -> bool: ...
    def __lt__(self, __other: Coord) -> bool: ...
    def __gt__(self, __other: Coord) -> bool: ...
    def __le__(self, __other: Coord) -> bool: ...
    def __ge__(self, __other: Coord) -> bool: ...
    def __str__(self) -> str: ...
    def __repr__(self) -> str: ...
    def to_tuple(self) -> Tuple[int, int]: ...
    @property
    def address(self) -> int: ...

class CoordOffset:
    delta_x: int = ...
    delta_y: int = ...
    def __init__(self, delta_x: int, delta_y: int) -> None: ...
    @overload
    def __add__(self, __other: Coord) -> Coord: ...
    @overload
    def __add__(self, __other: CoordOffset) -> CoordOffset: ...
    def __iadd__(self, __other: CoordOffset) -> CoordOffset: ...
    def __sub__(self, __other: CoordOffset) -> CoordOffset: ...
    def __isub__(self, __other: CoordOffset) -> CoordOffset: ...
    def __eq__(self, __other: CoordOffset) -> bool: ...
    def __ne__(self, __other: CoordOffset) -> bool: ...
